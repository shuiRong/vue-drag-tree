{"version":3,"sources":["webpack:///./src/DragNode.vue"],"names":[],"mappings":"AAkMA,eACA,gBAOA,oDACA,mBAGA,MACA,eAGA,MACA,gBAGA,MACA,eAGA,cACA,YACA,sBACA,mEACA,eACA,cACA,iCACA,yCAGA,YACA,WACA,cAGA,oBACA,qBACA,QACA,SACA,iBACA,iBACA,2BACA,iCACA,oCACA,0BACA,qCAGA,aACA","file":"vue-drag-tree.min.css","sourcesContent":["<template>\n  <div :style='styleObj' :draggable='isDraggable' @drag.stop='drag' @dragstart.stop='dragStart' @dragover.stop='dragOver' @dragenter.stop='dragEnter' @dragleave.stop='dragLeave' @drop.stop='drop' @dragend.stop='dragEnd' class='dnd-container'>\n    <div :class='{\"is-clicked\": isClicked,\"is-hover\":isHover}' @click=\"toggle\" @mouseover='mouseOver' @mouseout='mouseOut' @dblclick=\"changeType\">\n      <div :style=\"{ 'padding-left': (this.depth - 1) * 24 + 'px' }\" :id='model.id' class='treeNodeText'>\n        <slot :nodeName=\"model.name\" :isClicked='isClicked'>\n          <span :class=\"[isClicked ? 'nodeClicked' : '','vue-drag-node-icon']\"></span>\n          <span class='text'>{{model.name}}</span>\n        </slot>\n      </div>\n    </div>\n    <div class='treeMargin' v-show=\"open\" v-if=\"isFolder\">\n      <drag-node v-for=\"item2 in model.children\" :allowDrag='allowDrag' :allowDrop='allowDrop' :depth='increaseDepth' :model=\"item2\" :key='item2.id' :defaultText='defaultText' :disableDBClick='disableDBClick'>\n      </drag-node>\n    </div>\n  </div>\n</template>\n\n<script>\nlet id = 1000;\nlet fromData = null;\nlet toData = null;\nlet nodeClicked = undefined; // Attention: 递归的所有组件共享同一个＂顶级作用域＂（这个词或许不太正确，但就这个意思）．即：共享上面这几个let变量．这为实现当前节点的高亮提供了基础．\nlet rootTree = null; // vue-drag-tree组件引用\n\nimport { findRoot, exchangeData } from \"./util\";\nexport default {\n  name: \"DragNode\",\n  data() {\n    return {\n      open: false,\n      isClicked: false, // 当前节点被点击\n      isHover: false, // 当前节点被hvoer\n      styleObj: {\n        opacity: 1\n      }\n    };\n  },\n  props: {\n    model: Object,\n    allowDrag: {\n      type: Function,\n      default: () => true\n    },\n    allowDrop: {\n      type: Function,\n      default: () => true\n    },\n    defaultText: {\n      // 填加节点时显示的默认文本．\n      type: String,\n      default: \"New Node\"\n    },\n    depth: {\n      type: Number,\n      default: 0\n    },\n    disableDBClick: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    isFolder() {\n      return this.model.children && this.model.children.length;\n    },\n    increaseDepth() {\n      return this.depth + 1;\n    },\n    isDraggable() {\n      return this.allowDrag(this.model, this);\n    }\n  },\n  methods: {\n    toggle() {\n      if (this.isFolder) {\n        this.open = !this.open;\n      }\n      // 调用vue-drag-tree的父组件中的方法,以传递出当前被点击的节点的id值\n      //　API: 对外开放的当前被点击节点的信息\n      rootTree.emitCurNodeClicked(this.model, this);\n\n      // 纪录节点被点击的状态\n      this.isClicked = !this.isClicked;\n\n      // 用户需要节点高亮\n      // 第一次点击当前节点．当前节点高亮，遍历重置其他节点的样式\n      if (nodeClicked != this.model.id) {\n        let treeParent = rootTree.$parent;\n\n        // 遍历重置所有树组件的高亮样式\n        let nodeStack = [treeParent.$children[0]];\n        while (nodeStack.length != 0) {\n          let item = nodeStack.shift();\n          item.isClicked = false;\n          if (item.$children && item.$children.length > 0) {\n            nodeStack = nodeStack.concat(item.$children);\n          }\n        }\n        // 然后把当前节点的样式设置为高亮\n        this.isClicked = true;\n\n        // 设置节点为 当前节点\n        nodeClicked = this.model.id;\n      }\n    },\n\n    changeType() {\n      // 如果用户禁用了双击增加item，什么都不做\n      if (this.disableDBClick) {\n        return;\n      }\n      // 用户需要高亮-->才纪录当前被点击节点\n      if (this.currentHighlight) {\n        nodeClicked = this.model.id;\n      }\n      if (!this.isFolder) {\n        this.$set(this.model, \"children\", []);\n        this.addChild();\n        this.open = true;\n        this.isClicked = true;\n      }\n    },\n    mouseOver(e) {\n      this.isHover = true;\n    },\n    mouseOut(e) {\n      this.isHover = false;\n    },\n    addChild() {\n      this.model.children.push({\n        name: this.defaultText,\n        id: id++\n      });\n    },\n    removeChild(id) {\n      // 获取父组件的model.children\n      let parent_model_children = this.$parent.model.children;\n\n      // 在父组件model.children里删除\n      for (let index in parent_model_children) {\n        // 找到该删的id\n        if (parent_model_children[index].id == id) {\n          parent_model_children = parent_model_children.splice(index, 1);\n          break;\n        }\n      }\n    },\n    drag(e) {\n      fromData = this;\n      rootTree.emitDrag(this.model, this, e);\n    },\n    dragStart(e) {\n      e.dataTransfer.effectAllowed = \"move\";\n      e.dataTransfer.setData(\"text/plain\", \"asdad\");\n      return true;\n    },\n    dragOver(e) {\n      e.preventDefault();\n      rootTree.emitDragOver(this.model, this, e);\n      return true;\n    },\n    dragEnter(e) {\n      if (this._uid !== fromData._uid) {\n        this.styleObj.opacity = 0.5;\n      }\n      rootTree.emitDragEnter(this.model, this, e);\n    },\n    dragLeave(e) {\n      this.styleObj.opacity = 1;\n      rootTree.emitDragLeave(this.model, this, e);\n    },\n    drop(e) {\n      e.preventDefault();\n      this.styleObj.opacity = 1;\n      // 如果判断当前节点不允许被drop，return;\n      if (!this.allowDrop(this.model, this)) {\n        return;\n      }\n      toData = this;\n      exchangeData(rootTree, fromData, toData);\n      rootTree.emitDrop(this.model, this, e);\n    },\n    dragEnd(e) {\n      rootTree.emitDragEnd(this.model, this, e);\n      return;\n    }\n  },\n  created() {\n    rootTree = findRoot(this);\n  }\n};\n</script>\n\n<style>\n.dnd-container {\n  background: #fff;\n}\n\n.dnd-container .is-clicked {\n  background: #e5e9f2;\n}\n\n.dnd-container .is-hover {\n  background: #e5e9f2;\n}\n\n.item {\n  cursor: pointer;\n}\n\n.bold {\n  font-weight: bold;\n}\n\n.text {\n  font-size: 12px;\n}\n\n.treeNodeText {\n  height: 28px;\n  box-sizing: border-box;\n  width: fit-content;\n  font-size: 18px;\n  color: #324057;\n  display: flex;\n  align-items: center;\n}\n\n.changeTree {\n  width: 16px;\n  color: #324057;\n}\n\n.vue-drag-node-icon {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 10px;\n  margin-right: 8px;\n  border-left: 4px solid grey;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n  border-right: 0 solid yellow;\n  transition: transform 0.3s ease-in-out;\n}\n\n.nodeClicked {\n  transform: rotate(90deg);\n}\n</style>\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/DragNode.vue?88ffde10"],"sourceRoot":""}